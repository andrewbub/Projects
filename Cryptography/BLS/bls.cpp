// Andrew Bub 
// CSE 40622 PA04 - BLS Signature
// April 23, 2018

// Use "g++ bls.cpp -lpbc -lgmp -I/usr/local/include/pbc -o bls" to compile
// Use "./bls < ../param/a.param" to execute

#include <iostream>
#include <string>
#include <pbc.h>
#include <gmp.h>

using namespace std;

// HARD CODE INPUTS ----------------------------------------------------------------------------------------------------------------------------------------------------------
// MINE
string g1_input = "[518880064081906458480870049377693362650051303791507999174828002033363102201284997970651332060007692206944442588819989333154038059077554746197346580726404,922146085430156514130676061956555089351882506422273763456120703447406294420465709475756735546182398144461369946862121634130511047201631465572560505418583]"; // generator
char *m_input = "CSE 40622 is really fun!!"; // m message
string sk_input = "128112216885054085779135890052683951891862528941"; // secret key

char *m_p_input = "OMG! CSE 40622 is so fun!!!"; // m' message
string sig_p_input = "[5894731206167164831484892566165132159868343316694598881229518101907353686256529882757517579775781136714956662372326627009134417820587523031220200637365374,8370391912951830200833689882330726264339938162448154393415296715770324362954816187528803217374114651979569928366864178720540664033819805283180392112882168]"; // sigma prime (signature)
string pk_p_input = "[82138739366931776083627979021804447865124310677891282884105830798908560513178057195574195048344938606742952130881327234124313233054537538547584897335589,2136279425986896523884939378955945264111108583956150060808797046106251886484459488209206392162210352446421791424985923585141995781291878647864917615004475]"; // pk prime (public key)

// GIVEN EXAMPLE 1
/*
string g1_input = "[479644788066157990342539856972023396114725156334383820770942536003158033674797088117003902028278667909958251078965086143327246627483526322800515157403134, 3879204484235734769220165315042458580519895615912098576672512817442335527288503903170639988871143457175348657498392178871827564593821738127708774369015913]";
char *m_input = "CSE 40622 is fun! Yay!";
string sk_input = "124082650188479568800315864596935264695441418483";

char *m_p_input = "CSE 40622 is so fun!!!";
string sig_p_input = "[7504617038682395177281066972148583195205715176161669978433445950872280510361873371600251264647673951123758897041709632274278936453659518480853612918845320, 6626720611979814572587977365992011138366750137105828902669285798021198055973629413494494245054578960124841326211078668199332571290103461939751293750500728]";
string pk_p_input = "[4337945082081490641852505352186088956074208591041099912264172207464499190235250090854929353925036035348791959154364965977498891962784867589773546665939512, 6313854537331885645775042049784646983900381492095109907544995147509921845111738201311932501575422258803584994836689042913087171530017791138384586704672]"; */ 

// GIVEN EXAMPLE 2
/*
string g1_input = "[479644788066157990342539856972023396114725156334383820770942536003158033674797088117003902028278667909958251078965086143327246627483526322800515157403134, 3879204484235734769220165315042458580519895615912098576672512817442335527288503903170639988871143457175348657498392178871827564593821738127708774369015913]";
char *m_input = "CSE 40622 is fun!";
string sk_input = "124082650188479568800315864596935264695441418483";

char *m_p_input = "CSE 40622 is so fun!!!";
string sig_p_input = "387705509364981128102938360909085538572504940084027147081313550571420300694405703502817999452069410903677922698787128846688691818321622348727881955513773, 1826679696759231429837354845781708484284157381665341139418683116106482023066830464914427858013154234248571632133043029649010505250091535295973153485759645]";
string pk_p_input = "[1946143236206019904285057474579782573700526049727845023518986172130205271379474058530173316603240923622103146031309160277698298127521387238917787921984088, 8733499768788973560700131048415909956931963658244998612391048611277373034148582050274219809135984643388877766676779044196189073895215440921087830760931459]"; */



// MAIN EXECUTION ------------------------------------------------------------------------------------------------------------------------------------------------------------
int main()
{
	// Initialize a pairing
	pairing_t pairing;
	char param[1024];
	size_t count = fread(param, 1, 1024, stdin);
	if (!count) pbc_die("input error");
	pairing_init_set_buf(pairing, param, count);


	// Initialize g1 generator
	element_t g1; // generator
	element_init_G1(g1, pairing);
	element_set_str(g1, g1_input.c_str(), 10);

	// Random element x for secret key, sk
	element_t sk;
	element_init_Zr(sk, pairing);
	element_set_str(sk, sk_input.c_str(), 10);
	
	// public key, pk := g1^x
	element_t pk;
	element_init_G1(pk, pairing);
	element_pow_zn(pk, g1, sk);

	// Hash function h := g^H(m)
	element_t h;
	element_t H;
	element_init_G1(h, pairing);
	element_init_Zr(H, pairing);

	element_from_hash(H, static_cast<void *>(m_input), strlen(m_input)); // H(m)
	element_pow_zn(h, g1, H);

	// Sigma, sig = h^x
	element_t sig;
	element_init_G1(sig, pairing);

	element_pow_zn(sig, h, sk);

	// Output
	element_printf("%B\n", sig); // Sigma
	element_printf("%B\n", g1); // g1

	// Verify Signature
	element_from_hash(H, static_cast<void *>(m_p_input), strlen(m_p_input)); // H(m)
	element_pow_zn(h, g1, H);
	element_set_str(sig, sig_p_input.c_str(), 10); // set sigma prime (signature)
	element_set_str(pk, pk_p_input.c_str(), 10); // set pk prime (public key)

	element_t t1;
	element_t t2;
	element_init_GT(t1, pairing);
	element_init_GT(t2, pairing);
	element_pairing(t1, h, pk);
	element_pairing(t2, sig, g1);

	if(element_cmp(t1, t2))
		cout << endl << "0" << endl;
	else
		cout << endl << "1" << endl;


	// Clear all variables
	element_clear(g1);
	element_clear(sk);
	element_clear(pk);
	element_clear(h);
	element_clear(H);
	element_clear(sig);
	element_clear(t1);
	element_clear(t2);
	pairing_clear(pairing); 

	return 0;
}
